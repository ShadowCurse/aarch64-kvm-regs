use std::{env::args, path::PathBuf};

pub const KVM_REG_ARM64: u64 = 6917529027641081856;
pub const KVM_REG_SIZE_U64: u64 = 13510798882111488;
pub const KVM_REG_ARM64_SYSREG: u32 = 1245184;
pub const KVM_REG_ARM64_SYSREG_OP0_MASK: u32 = 49152;
pub const KVM_REG_ARM64_SYSREG_OP0_SHIFT: u32 = 14;
pub const KVM_REG_ARM64_SYSREG_OP1_MASK: u32 = 14336;
pub const KVM_REG_ARM64_SYSREG_OP1_SHIFT: u32 = 11;
pub const KVM_REG_ARM64_SYSREG_CRN_MASK: u32 = 1920;
pub const KVM_REG_ARM64_SYSREG_CRN_SHIFT: u32 = 7;
pub const KVM_REG_ARM64_SYSREG_CRM_MASK: u32 = 120;
pub const KVM_REG_ARM64_SYSREG_CRM_SHIFT: u32 = 3;
pub const KVM_REG_ARM64_SYSREG_OP2_MASK: u32 = 7;
pub const KVM_REG_ARM64_SYSREG_OP2_SHIFT: u32 = 0;

#[derive(Debug)]
pub enum Access {
    RW,
    RO,
    WO,
}

#[allow(unused)]
#[derive(Debug)]
pub struct ArmRegister {
    op0: u64,
    op1: u64,
    crn: u64,
    crm: u64,
    op2: u64,
    access: Access,
    mnemonic: &'static str,
    register: &'static str,
    reg_id: u64,
}

macro_rules! arm64_sys_reg {
    ($op0: tt, $op1: tt, $crn: tt, $crm: tt, $op2: tt, $access: tt, $mnemonic: tt, $name: tt) => {{
        let reg_id = KVM_REG_ARM64 as u64
            | KVM_REG_SIZE_U64 as u64
            | KVM_REG_ARM64_SYSREG as u64
            | ((($op0 as u64) << KVM_REG_ARM64_SYSREG_OP0_SHIFT)
                & KVM_REG_ARM64_SYSREG_OP0_MASK as u64)
            | ((($op1 as u64) << KVM_REG_ARM64_SYSREG_OP1_SHIFT)
                & KVM_REG_ARM64_SYSREG_OP1_MASK as u64)
            | ((($crn as u64) << KVM_REG_ARM64_SYSREG_CRN_SHIFT)
                & KVM_REG_ARM64_SYSREG_CRN_MASK as u64)
            | ((($crm as u64) << KVM_REG_ARM64_SYSREG_CRM_SHIFT)
                & KVM_REG_ARM64_SYSREG_CRM_MASK as u64)
            | ((($op2 as u64) << KVM_REG_ARM64_SYSREG_OP2_SHIFT)
                & KVM_REG_ARM64_SYSREG_OP2_MASK as u64);
        ArmRegister {
            op0: $op0,
            op1: $op1,
            crn: $crn,
            crm: $crm,
            op2: $op2,
            access: Access::$access,
            mnemonic: stringify!($mnemonic),
            register: stringify!($name),
            reg_id,
        }
    }};
}

// Data taken from ARMv8 ARM DDI 0487A / System instruction encodings for non-Debug System register accesses

#[rustfmt::skip]
pub const ARM_REGISTERS: [ArmRegister; 523] = [
arm64_sys_reg!(0b11, 0b000, 0b0000, 0b0000, 0b000, RO, MIDR_EL1, MIDR_EL1), 
arm64_sys_reg!(0b11, 0b000, 0b0000, 0b0000, 0b000, RO, MIDR_EL1, VPIDR_EL2), 
// arm64_sys_reg!(0b11, 0b000, 0b0000, 0b0000, 0b000, RO, VPIDR_EL2, MIDR_EL1); 
// arm64_sys_reg!(0b11, 0b000, 0b0000, 0b0000, 0b000, RO, VPIDR_EL2, VPIDR_EL2); 
arm64_sys_reg!(0b11, 0b000, 0b0000, 0b0000, 0b101, RO, MPIDR_EL1, MPIDR_EL1), 
arm64_sys_reg!(0b11, 0b000, 0b0000, 0b0000, 0b101, RO, MPIDR_EL1, VMPIDR_EL2),
arm64_sys_reg!(0b11, 0b000, 0b0000, 0b0000, 0b101, RO, VMPIDR_EL2, MPIDR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0000, 0b0000, 0b101, RO, VMPIDR_EL2, VMPIDR_EL2),
arm64_sys_reg!(0b11, 0b000, 0b0000, 0b0000, 0b110, RO, REVIDR_EL1, REVIDR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0000, 0b0001, 0b000, RO, ID_PFR0_EL1, ID_PFR0_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0000, 0b0001, 0b001, RO, ID_PFR1_EL1, ID_PFR1_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0000, 0b0001, 0b010, RO, ID_DFR0_EL1, ID_DFR0_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0000, 0b0001, 0b011, RO, ID_AFR0_EL1, ID_AFR0_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0000, 0b0001, 0b100, RO, ID_MMFR0_EL1, ID_MMFR0_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0000, 0b0001, 0b101, RO, ID_MMFR1_EL1, ID_MMFR1_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0000, 0b0001, 0b110, RO, ID_MMFR2_EL1, ID_MMFR2_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0000, 0b0001, 0b111, RO, ID_MMFR3_EL1, ID_MMFR3_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0000, 0b0010, 0b000, RO, ID_ISAR0_EL1, ID_ISAR0_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0000, 0b0010, 0b001, RO, ID_ISAR1_EL1, ID_ISAR1_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0000, 0b0010, 0b010, RO, ID_ISAR2_EL1, ID_ISAR2_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0000, 0b0010, 0b011, RO, ID_ISAR3_EL1, ID_ISAR3_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0000, 0b0010, 0b100, RO, ID_ISAR4_EL1, ID_ISAR4_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0000, 0b0010, 0b101, RO, ID_ISAR5_EL1, ID_ISAR5_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0000, 0b0010, 0b110, RO, ID_MMFR4_EL1, ID_MMFR4_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0000, 0b0010, 0b111, RO, ID_ISAR6_EL1, ID_ISAR6_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0000, 0b0011, 0b000, RO, MVFR0_EL1, MVFR0_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0000, 0b0011, 0b001, RO, MVFR1_EL1, MVFR1_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0000, 0b0011, 0b010, RO, MVFR2_EL1, MVFR2_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0000, 0b0011, 0b100, RO, ID_PFR2_EL1, ID_PFR2_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0000, 0b0011, 0b101, RO, ID_DFR1_EL1, ID_DFR1_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0000, 0b0011, 0b110, RO, ID_MMFR5_EL1, ID_MMFR5_EL1),
// 11 000 0000 0011 n RO, for
// n={3, 7}
// Reserved, RAZ. -
arm64_sys_reg!(0b11, 0b000, 0b0000, 0b0100, 0b000, RO, ID_AA64PFR0_EL1, ID_AA64PFR0_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0000, 0b0100, 0b001, RO, ID_AA64PFR1_EL1, ID_AA64PFR1_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0000, 0b0100, 0b100, RO, ID_AA64ZFR0_EL1, ID_AA64ZFR0_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0000, 0b0100, 0b101, RO, ID_AA64SMFR0_EL1, ID_AA64SMFR0_EL1),
// 11 000 0000 0100 n RO, for
// n={2, 3,
// 6, 7}
// Reserved, RAZ. -
arm64_sys_reg!(0b11, 0b000, 0b0000, 0b0101, 0b000, RO, ID_AA64DFR0_EL1, ID_AA64DFR0_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0000, 0b0101, 0b001, RO, ID_AA64DFR1_EL1, ID_AA64DFR1_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0000, 0b0101, 0b100, RO, ID_AA64AFR0_EL1, ID_AA64AFR0_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0000, 0b0101, 0b101, RO, ID_AA64AFR1_EL1, ID_AA64AFR1_EL1),
// 11 000 0000 0101 n RO, for
// n={2, 3,
// 6, 7}
// Reserved, RAZ. -
arm64_sys_reg!(0b11, 0b000, 0b0000, 0b0110, 0b000, RO, ID_AA64ISAR0_EL1, ID_AA64ISAR0_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0000, 0b0110, 0b001, RO, ID_AA64ISAR1_EL1, ID_AA64ISAR1_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0000, 0b0110, 0b010, RO, ID_AA64ISAR2_EL1, ID_AA64ISAR2_EL1),
// 11 000 0000 0110 n RO, for
// n=3-7
// Reserved, RAZ. -
arm64_sys_reg!(0b11, 0b000, 0b0000, 0b0111, 0b000, RO, ID_AA64MMFR0_EL1, ID_AA64MMFR0_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0000, 0b0111, 0b001, RO, ID_AA64MMFR1_EL1, ID_AA64MMFR1_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0000, 0b0111, 0b010, RO, ID_AA64MMFR2_EL1, ID_AA64MMFR2_EL1),
// 11 000 0000 0111 n RO, for
// n=3-7
// Reserved, RAZ. -
arm64_sys_reg!(0b11, 0b000, 0b0001, 0b0000, 0b000, RW, SCTLR_EL1, SCTLR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0001, 0b0000, 0b000, RW, SCTLR_EL1, SCTLR_EL2),
arm64_sys_reg!(0b11, 0b000, 0b0001, 0b0000, 0b000, RW, SCTLR_EL2, SCTLR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0001, 0b0000, 0b000, RW, SCTLR_EL2, SCTLR_EL2),
arm64_sys_reg!(0b11, 0b000, 0b0001, 0b0000, 0b001, RW, ACTLR_EL1, ACTLR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0001, 0b0000, 0b010, RW, CPACR_EL1, CPACR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0001, 0b0000, 0b010, RW, CPACR_EL1, CPTR_EL2),
arm64_sys_reg!(0b11, 0b000, 0b0001, 0b0000, 0b010, RW, CPTR_EL2, CPACR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0001, 0b0000, 0b010, RW, CPTR_EL2, CPTR_EL2),
arm64_sys_reg!(0b11, 0b000, 0b0001, 0b0000, 0b101, RW, RGSR_EL1, RGSR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0001, 0b0000, 0b110, RW, GCR_EL1, GCR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0001, 0b0010, 0b000, RW, ZCR_EL1, ZCR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0001, 0b0010, 0b000, RW, ZCR_EL1, ZCR_EL2),
arm64_sys_reg!(0b11, 0b000, 0b0001, 0b0010, 0b000, RW, ZCR_EL2, ZCR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0001, 0b0010, 0b000, RW, ZCR_EL2, ZCR_EL2),
arm64_sys_reg!(0b11, 0b000, 0b0001, 0b0010, 0b001, RW, TRFCR_EL1, TRFCR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0001, 0b0010, 0b001, RW, TRFCR_EL1, TRFCR_EL2),
arm64_sys_reg!(0b11, 0b000, 0b0001, 0b0010, 0b001, RW, TRFCR_EL2, TRFCR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0001, 0b0010, 0b001, RW, TRFCR_EL2, TRFCR_EL2),
arm64_sys_reg!(0b11, 0b000, 0b0001, 0b0010, 0b100, RW, SMPRI_EL1, SMPRI_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0001, 0b0010, 0b110, RW, SMCR_EL1, SMCR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0001, 0b0010, 0b110, RW, SMCR_EL1, SMCR_EL2),
arm64_sys_reg!(0b11, 0b000, 0b0001, 0b0010, 0b110, RW, SMCR_EL2, SMCR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0001, 0b0010, 0b110, RW, SMCR_EL2, SMCR_EL2),
arm64_sys_reg!(0b11, 0b000, 0b0010, 0b0000, 0b000, RW, TTBR0_EL1, TTBR0_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0010, 0b0000, 0b000, RW, TTBR0_EL1, TTBR0_EL2),
arm64_sys_reg!(0b11, 0b000, 0b0010, 0b0000, 0b000, RW, TTBR0_EL2, TTBR0_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0010, 0b0000, 0b000, RW, TTBR0_EL2, TTBR0_EL2),
arm64_sys_reg!(0b11, 0b000, 0b0010, 0b0000, 0b001, RW, TTBR1_EL1, TTBR1_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0010, 0b0000, 0b001, RW, TTBR1_EL1, TTBR1_EL2),
arm64_sys_reg!(0b11, 0b000, 0b0010, 0b0000, 0b001, RW, TTBR1_EL2, TTBR1_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0010, 0b0000, 0b001, RW, TTBR1_EL2, TTBR1_EL2),
arm64_sys_reg!(0b11, 0b000, 0b0010, 0b0000, 0b010, RW, TCR_EL1, TCR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0010, 0b0000, 0b010, RW, TCR_EL1, TCR_EL2),
arm64_sys_reg!(0b11, 0b000, 0b0010, 0b0000, 0b010, RW, TCR_EL2, TCR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0010, 0b0000, 0b010, RW, TCR_EL2, TCR_EL2),
arm64_sys_reg!(0b11, 0b000, 0b0010, 0b0001, 0b000, RW, APIAKeyLo_EL1, APIAKeyLo_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0010, 0b0001, 0b001, RW, APIAKeyHi_EL1, APIAKeyHi_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0010, 0b0001, 0b010, RW, APIBKeyLo_EL1, APIBKeyLo_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0010, 0b0001, 0b011, RW, APIBKeyHi_EL1, APIBKeyHi_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0010, 0b0010, 0b000, RW, APDAKeyLo_EL1, APDAKeyLo_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0010, 0b0010, 0b001, RW, APDAKeyHi_EL1, APDAKeyHi_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0010, 0b0010, 0b010, RW, APDBKeyLo_EL1, APDBKeyLo_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0010, 0b0010, 0b011, RW, APDBKeyHi_EL1, APDBKeyHi_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0010, 0b0011, 0b000, RW, APGAKeyLo_EL1, APGAKeyLo_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0010, 0b0011, 0b001, RW, APGAKeyHi_EL1, APGAKeyHi_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0100, 0b0000, 0b000, RW, SPSR_EL1, SPSR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0100, 0b0000, 0b000, RW, SPSR_EL1, SPSR_EL2),
arm64_sys_reg!(0b11, 0b000, 0b0100, 0b0000, 0b000, RW, SPSR_EL2, SPSR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0100, 0b0000, 0b000, RW, SPSR_EL2, SPSR_EL2),
arm64_sys_reg!(0b11, 0b000, 0b0100, 0b0000, 0b001, RW, ELR_EL1, ELR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0100, 0b0000, 0b001, RW, ELR_EL1, ELR_EL2),
arm64_sys_reg!(0b11, 0b000, 0b0100, 0b0000, 0b001, RW, ELR_EL2, ELR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0100, 0b0000, 0b001, RW, ELR_EL2, ELR_EL2),
arm64_sys_reg!(0b11, 0b000, 0b0100, 0b0001, 0b000, RW, SP_EL0, SP_EL0),
// 11 000 0100 0010 000 - SPSel -
// 11 000 0100 0010 010 - CurrentEL -
// 11 000 0100 0010 011 - PAN -
// 11 000 0100 0010 100 - UAO -
// 11 000 0100 0011 000 - ALLINT -
arm64_sys_reg!(0b11, 0b000, 0b0100, 0b0110, 0b000, RW, ICC_PMR_EL1, ICC_PMR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0100, 0b0110, 0b000, RW, ICC_PMR_EL1, ICV_PMR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0100, 0b0110, 0b000, RW, ICV_PMR_EL1, ICC_PMR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0100, 0b0110, 0b000, RW, ICV_PMR_EL1, ICV_PMR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0101, 0b0001, 0b000, RW, AFSR0_EL1, AFSR0_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0101, 0b0001, 0b000, RW, AFSR0_EL1, AFSR0_EL2),
arm64_sys_reg!(0b11, 0b000, 0b0101, 0b0001, 0b000, RW, AFSR0_EL2, AFSR0_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0101, 0b0001, 0b000, RW, AFSR0_EL2, AFSR0_EL2),
arm64_sys_reg!(0b11, 0b000, 0b0101, 0b0001, 0b001, RW, AFSR1_EL1, AFSR1_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0101, 0b0001, 0b001, RW, AFSR1_EL1, AFSR1_EL2),
arm64_sys_reg!(0b11, 0b000, 0b0101, 0b0001, 0b001, RW, AFSR1_EL2, AFSR1_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0101, 0b0001, 0b001, RW, AFSR1_EL2, AFSR1_EL2),
arm64_sys_reg!(0b11, 0b000, 0b0101, 0b0010, 0b000, RW, ESR_EL1, ESR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0101, 0b0010, 0b000, RW, ESR_EL1, ESR_EL2),
arm64_sys_reg!(0b11, 0b000, 0b0101, 0b0010, 0b000, RW, ESR_EL2, ESR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0101, 0b0010, 0b000, RW, ESR_EL2, ESR_EL2),
arm64_sys_reg!(0b11, 0b000, 0b0101, 0b0011, 0b000, RO, ERRIDR_EL1, ERRIDR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0101, 0b0011, 0b001, RW, ERRSELR_EL1, ERRSELR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0101, 0b0100, 0b000, RO, ERXFR_EL1, ERXFR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0101, 0b0100, 0b001, RW, ERXCTLR_EL1, ERXCTLR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0101, 0b0100, 0b010, RW, ERXSTATUS_EL1, ERXSTATUS_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0101, 0b0100, 0b011, RW, ERXADDR_EL1, ERXADDR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0101, 0b0100, 0b100, RO, ERXPFGF_EL1, ERXPFGF_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0101, 0b0100, 0b101, RW, ERXPFGCTL_EL1, ERXPFGCTL_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0101, 0b0100, 0b110, RW, ERXPFGCDN_EL1, ERXPFGCDN_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0101, 0b0101, 0b000, RW, ERXMISC0_EL1, ERXMISC0_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0101, 0b0101, 0b001, RW, ERXMISC1_EL1, ERXMISC1_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0101, 0b0101, 0b010, RW, ERXMISC2_EL1, ERXMISC2_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0101, 0b0101, 0b011, RW, ERXMISC3_EL1, ERXMISC3_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0101, 0b0110, 0b000, RW, TFSR_EL1, TFSR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0101, 0b0110, 0b000, RW, TFSR_EL1, TFSR_EL2),
arm64_sys_reg!(0b11, 0b000, 0b0101, 0b0110, 0b000, RW, TFSR_EL2, TFSR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0101, 0b0110, 0b000, RW, TFSR_EL2, TFSR_EL2),
arm64_sys_reg!(0b11, 0b000, 0b0101, 0b0110, 0b001, RW, TFSRE0_EL1, TFSRE0_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0110, 0b0000, 0b000, RW, FAR_EL1, FAR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0110, 0b0000, 0b000, RW, FAR_EL1, FAR_EL2),
arm64_sys_reg!(0b11, 0b000, 0b0110, 0b0000, 0b000, RW, FAR_EL2, FAR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b0110, 0b0000, 0b000, RW, FAR_EL2, FAR_EL2),
arm64_sys_reg!(0b11, 0b000, 0b0111, 0b0100, 0b000, RW, PAR_EL1, PAR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1001, 0b1001, 0b000, RW, PMSCR_EL1, PMSCR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1001, 0b1001, 0b000, RW, PMSCR_EL1, PMSCR_EL2),
arm64_sys_reg!(0b11, 0b000, 0b1001, 0b1001, 0b000, RW, PMSCR_EL2, PMSCR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1001, 0b1001, 0b000, RW, PMSCR_EL2, PMSCR_EL2),
arm64_sys_reg!(0b11, 0b000, 0b1001, 0b1001, 0b001, RW, PMSNEVFR_EL1, PMSNEVFR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1001, 0b1001, 0b010, RW, PMSICR_EL1, PMSICR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1001, 0b1001, 0b011, RW, PMSIRR_EL1, PMSIRR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1001, 0b1001, 0b100, RW, PMSFCR_EL1, PMSFCR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1001, 0b1001, 0b101, RW, PMSEVFR_EL1, PMSEVFR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1001, 0b1001, 0b110, RW, PMSLATFR_EL1, PMSLATFR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1001, 0b1001, 0b111, RO, PMSIDR_EL1, PMSIDR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1001, 0b1010, 0b000, RW, PMBLIMITR_EL1, PMBLIMITR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1001, 0b1010, 0b001, RW, PMBPTR_EL1, PMBPTR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1001, 0b1010, 0b011, RW, PMBSR_EL1, PMBSR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1001, 0b1010, 0b111, RO, PMBIDR_EL1, PMBIDR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1001, 0b1011, 0b000, RW, TRBLIMITR_EL1, TRBLIMITR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1001, 0b1011, 0b001, RW, TRBPTR_EL1, TRBPTR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1001, 0b1011, 0b010, RW, TRBBASER_EL1, TRBBASER_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1001, 0b1011, 0b011, RW, TRBSR_EL1, TRBSR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1001, 0b1011, 0b100, RW, TRBMAR_EL1, TRBMAR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1001, 0b1011, 0b110, RW, TRBTRG_EL1, TRBTRG_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1001, 0b1011, 0b111, RO, TRBIDR_EL1, TRBIDR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1001, 0b1110, 0b001, RW, PMINTENSET_EL1, PMINTENSET_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1001, 0b1110, 0b010, RW, PMINTENCLR_EL1, PMINTENCLR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1001, 0b1110, 0b110, RO, PMMIR_EL1, PMMIR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1010, 0b0010, 0b000, RW, MAIR_EL1, MAIR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1010, 0b0010, 0b000, RW, MAIR_EL1, MAIR_EL2),
arm64_sys_reg!(0b11, 0b000, 0b1010, 0b0010, 0b000, RW, MAIR_EL2, MAIR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1010, 0b0010, 0b000, RW, MAIR_EL2, MAIR_EL2),
arm64_sys_reg!(0b11, 0b000, 0b1010, 0b0011, 0b000, RW, AMAIR_EL1, AMAIR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1010, 0b0011, 0b000, RW, AMAIR_EL1, AMAIR_EL2),
arm64_sys_reg!(0b11, 0b000, 0b1010, 0b0011, 0b000, RW, AMAIR_EL2, AMAIR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1010, 0b0011, 0b000, RW, AMAIR_EL2, AMAIR_EL2),
arm64_sys_reg!(0b11, 0b000, 0b1010, 0b0100, 0b000, RW, LORSA_EL1, LORSA_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1010, 0b0100, 0b001, RW, LOREA_EL1, LOREA_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1010, 0b0100, 0b010, RW, LORN_EL1, LORN_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1010, 0b0100, 0b011, RW, LORC_EL1, LORC_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1010, 0b0100, 0b100, RO, MPAMIDR_EL1, MPAMIDR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1010, 0b0100, 0b111, RO, LORID_EL1, LORID_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1010, 0b0101, 0b000, RW, MPAM1_EL1, MPAM1_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1010, 0b0101, 0b000, RW, MPAM1_EL1, MPAM2_EL2),
arm64_sys_reg!(0b11, 0b000, 0b1010, 0b0101, 0b000, RW, MPAM2_EL2, MPAM1_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1010, 0b0101, 0b000, RW, MPAM2_EL2, MPAM2_EL2),
arm64_sys_reg!(0b11, 0b000, 0b1010, 0b0101, 0b001, RW, MPAM0_EL1, MPAM0_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b0000, 0b000, RW, VBAR_EL1, VBAR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b0000, 0b000, RW, VBAR_EL1, VBAR_EL2),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b0000, 0b000, RW, VBAR_EL2, VBAR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b0000, 0b000, RW, VBAR_EL2, VBAR_EL2),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b0000, 0b001, RO, RVBAR_EL1, RVBAR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b0000, 0b010, RW, RMR_EL1, RMR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b0001, 0b000, RO, ISR_EL1, ISR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b0001, 0b001, RW, DISR_EL1, DISR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b0001, 0b001, RW, DISR_EL1, VDISR_EL2),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b0001, 0b001, RW, VDISR_EL2, DISR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b0001, 0b001, RW, VDISR_EL2, VDISR_EL2),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1000, 0b000, RO, ICC_IAR0_EL1, ICC_IAR0_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1000, 0b000, RO, ICC_IAR0_EL1, ICV_IAR0_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1000, 0b000, RO, ICV_IAR0_EL1, ICC_IAR0_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1000, 0b000, RO, ICV_IAR0_EL1, ICV_IAR0_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1000, 0b001, WO, ICC_EOIR0_EL1, ICC_EOIR0_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1000, 0b001, WO, ICC_EOIR0_EL1, ICV_EOIR0_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1000, 0b001, WO, ICV_EOIR0_EL1, ICC_EOIR0_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1000, 0b001, WO, ICV_EOIR0_EL1, ICV_EOIR0_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1000, 0b010, RO, ICC_HPPIR0_EL1, ICC_HPPIR0_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1000, 0b010, RO, ICC_HPPIR0_EL1, ICV_HPPIR0_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1000, 0b010, RO, ICV_HPPIR0_EL1, ICC_HPPIR0_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1000, 0b010, RO, ICV_HPPIR0_EL1, ICV_HPPIR0_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1000, 0b011, RW, ICC_BPR0_EL1, ICC_BPR0_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1000, 0b011, RW, ICC_BPR0_EL1, ICV_BPR0_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1000, 0b011, RW, ICV_BPR0_EL1, ICC_BPR0_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1000, 0b011, RW, ICV_BPR0_EL1, ICV_BPR0_EL1),
// 11 000 1100 1000 1:m[1:0] RW ICC_AP0R<n>_EL1 ICC_AP0R_EL1[]
// 11 000 1100 1000 1:m[1:0] RW ICC_AP0R<n>_EL1 ICV_AP0R_EL1[]
// 11 000 1100 1000 1:m[1:0] RW ICV_AP0R<n>_EL1 ICC_AP0R_EL1[]
// 11 000 1100 1000 1:m[1:0] RW ICV_AP0R<n>_EL1 ICV_AP0R_EL1[]
// 11 000 1100 1001 0:m[1:0] RW ICC_AP1R<n>_EL1 ICC_AP1R_EL1[]
// 11 000 1100 1001 0:m[1:0] RW ICC_AP1R<n>_EL1 ICC_AP1R_EL1_NS[]
// 11 000 1100 1001 0:m[1:0] RW ICC_AP1R<n>_EL1 ICC_AP1R_EL1_S[]
// 11 000 1100 1001 0:m[1:0] RW ICC_AP1R<n>_EL1 ICV_AP1R_EL1[]
// 11 000 1100 1001 0:m[1:0] RW ICV_AP1R<n>_EL1 ICC_AP1R_EL1[]
// 11 000 1100 1001 0:m[1:0] RW ICV_AP1R<n>_EL1 ICC_AP1R_EL1_NS[]
// 11 000 1100 1001 0:m[1:0] RW ICV_AP1R<n>_EL1 ICC_AP1R_EL1_S[]
// 11 000 1100 1001 0:m[1:0] RW ICV_AP1R<n>_EL1 ICV_AP1R_EL1[]
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1001, 0b101, RO, ICC_NMIAR1_EL1, ICC_NMIAR1_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1001, 0b101, RO, ICC_NMIAR1_EL1, ICV_NMIAR1_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1001, 0b101, RO, ICV_NMIAR1_EL1, ICC_NMIAR1_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1001, 0b101, RO, ICV_NMIAR1_EL1, ICV_NMIAR1_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1011, 0b001, WO, ICC_DIR_EL1, ICC_DIR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1011, 0b001, WO, ICC_DIR_EL1, ICV_DIR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1011, 0b001, WO, ICV_DIR_EL1, ICC_DIR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1011, 0b001, WO, ICV_DIR_EL1, ICV_DIR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1011, 0b011, RO, ICC_RPR_EL1, ICC_RPR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1011, 0b011, RO, ICC_RPR_EL1, ICV_RPR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1011, 0b011, RO, ICV_RPR_EL1, ICC_RPR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1011, 0b011, RO, ICV_RPR_EL1, ICV_RPR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1011, 0b101, WO, ICC_SGI1R_EL1, ICC_SGI1R_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1011, 0b110, WO, ICC_ASGI1R_EL1, ICC_ASGI1R_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1011, 0b111, WO, ICC_SGI0R_EL1, ICC_SGI0R_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1100, 0b000, RO, ICC_IAR1_EL1, ICC_IAR1_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1100, 0b000, RO, ICC_IAR1_EL1, ICV_IAR1_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1100, 0b000, RO, ICV_IAR1_EL1, ICC_IAR1_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1100, 0b000, RO, ICV_IAR1_EL1, ICV_IAR1_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1100, 0b001, WO, ICC_EOIR1_EL1, ICC_EOIR1_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1100, 0b001, WO, ICC_EOIR1_EL1, ICV_EOIR1_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1100, 0b001, WO, ICV_EOIR1_EL1, ICC_EOIR1_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1100, 0b001, WO, ICV_EOIR1_EL1, ICV_EOIR1_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1100, 0b010, RO, ICC_HPPIR1_EL1, ICC_HPPIR1_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1100, 0b010, RO, ICC_HPPIR1_EL1, ICV_HPPIR1_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1100, 0b010, RO, ICV_HPPIR1_EL1, ICC_HPPIR1_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1100, 0b010, RO, ICV_HPPIR1_EL1, ICV_HPPIR1_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1100, 0b011, RW, ICC_BPR1_EL1, ICC_BPR1_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1100, 0b011, RW, ICC_BPR1_EL1, ICC_BPR1_EL1_NS),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1100, 0b011, RW, ICC_BPR1_EL1, ICC_BPR1_EL1_S),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1100, 0b011, RW, ICC_BPR1_EL1, ICV_BPR1_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1100, 0b011, RW, ICV_BPR1_EL1, ICC_BPR1_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1100, 0b011, RW, ICV_BPR1_EL1, ICC_BPR1_EL1_NS),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1100, 0b011, RW, ICV_BPR1_EL1, ICC_BPR1_EL1_S),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1100, 0b011, RW, ICV_BPR1_EL1, ICV_BPR1_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1100, 0b100, RW, ICC_CTLR_EL1, ICC_CTLR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1100, 0b100, RW, ICC_CTLR_EL1, ICC_CTLR_EL1_NS),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1100, 0b100, RW, ICC_CTLR_EL1, ICC_CTLR_EL1_S),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1100, 0b100, RW, ICC_CTLR_EL1, ICV_CTLR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1100, 0b100, RW, ICV_CTLR_EL1, ICC_CTLR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1100, 0b100, RW, ICV_CTLR_EL1, ICC_CTLR_EL1_NS),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1100, 0b100, RW, ICV_CTLR_EL1, ICC_CTLR_EL1_S),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1100, 0b100, RW, ICV_CTLR_EL1, ICV_CTLR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1100, 0b101, RW, ICC_SRE_EL1, ICC_SRE_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1100, 0b101, RW, ICC_SRE_EL1, ICC_SRE_EL1_NS),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1100, 0b101, RW, ICC_SRE_EL1, ICC_SRE_EL1_S),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1100, 0b110, RW, ICC_IGRPEN0_EL1, ICC_IGRPEN0_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1100, 0b110, RW, ICC_IGRPEN0_EL1, ICV_IGRPEN0_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1100, 0b110, RW, ICV_IGRPEN0_EL1, ICC_IGRPEN0_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1100, 0b110, RW, ICV_IGRPEN0_EL1, ICV_IGRPEN0_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1100, 0b111, RW, ICC_IGRPEN1_EL1, ICC_IGRPEN1_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1100, 0b111, RW, ICC_IGRPEN1_EL1, ICC_IGRPEN1_EL1_NS),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1100, 0b111, RW, ICC_IGRPEN1_EL1, ICC_IGRPEN1_EL1_S),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1100, 0b111, RW, ICC_IGRPEN1_EL1, ICV_IGRPEN1_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1100, 0b111, RW, ICV_IGRPEN1_EL1, ICC_IGRPEN1_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1100, 0b111, RW, ICV_IGRPEN1_EL1, ICC_IGRPEN1_EL1_NS),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1100, 0b111, RW, ICV_IGRPEN1_EL1, ICC_IGRPEN1_EL1_S),
arm64_sys_reg!(0b11, 0b000, 0b1100, 0b1100, 0b111, RW, ICV_IGRPEN1_EL1, ICV_IGRPEN1_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1101, 0b0000, 0b001, RW, CONTEXTIDR_EL1, CONTEXTIDR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1101, 0b0000, 0b001, RW, CONTEXTIDR_EL1, CONTEXTIDR_EL2),
arm64_sys_reg!(0b11, 0b000, 0b1101, 0b0000, 0b001, RW, CONTEXTIDR_EL2, CONTEXTIDR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1101, 0b0000, 0b001, RW, CONTEXTIDR_EL2, CONTEXTIDR_EL2),
arm64_sys_reg!(0b11, 0b000, 0b1101, 0b0000, 0b100, RW, TPIDR_EL1, TPIDR_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1101, 0b0000, 0b101, RW, ACCDATA_EL1, ACCDATA_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1101, 0b0000, 0b111, RW, SCXTNUM_EL1, SCXTNUM_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1101, 0b0000, 0b111, RW, SCXTNUM_EL1, SCXTNUM_EL2),
arm64_sys_reg!(0b11, 0b000, 0b1101, 0b0000, 0b111, RW, SCXTNUM_EL2, SCXTNUM_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1101, 0b0000, 0b111, RW, SCXTNUM_EL2, SCXTNUM_EL2),
arm64_sys_reg!(0b11, 0b000, 0b1110, 0b0001, 0b000, RW, CNTHCTL_EL2, CNTHCTL_EL2),
arm64_sys_reg!(0b11, 0b000, 0b1110, 0b0001, 0b000, RW, CNTHCTL_EL2, CNTKCTL_EL1),
arm64_sys_reg!(0b11, 0b000, 0b1110, 0b0001, 0b000, RW, CNTKCTL_EL1, CNTHCTL_EL2),
arm64_sys_reg!(0b11, 0b000, 0b1110, 0b0001, 0b000, RW, CNTKCTL_EL1, CNTKCTL_EL1),
arm64_sys_reg!(0b11, 0b001, 0b0000, 0b0000, 0b000, RO, CCSIDR_EL1, CCSIDR_EL1),
arm64_sys_reg!(0b11, 0b001, 0b0000, 0b0000, 0b001, RO, CLIDR_EL1, CLIDR_EL1),
arm64_sys_reg!(0b11, 0b001, 0b0000, 0b0000, 0b010, RO, CCSIDR2_EL1, CCSIDR2_EL1),
arm64_sys_reg!(0b11, 0b001, 0b0000, 0b0000, 0b100, RO, GMID_EL1, GMID_EL1),
arm64_sys_reg!(0b11, 0b001, 0b0000, 0b0000, 0b110, RO, SMIDR_EL1, SMIDR_EL1),
arm64_sys_reg!(0b11, 0b001, 0b0000, 0b0000, 0b111, RO, AIDR_EL1, AIDR_EL1),
arm64_sys_reg!(0b11, 0b010, 0b0000, 0b0000, 0b000, RW, CSSELR_EL1, CSSELR_EL1),
arm64_sys_reg!(0b11, 0b011, 0b0000, 0b0000, 0b001, RO, CTR_EL0, CTR_EL0),
arm64_sys_reg!(0b11, 0b011, 0b0000, 0b0000, 0b111, RO, DCZID_EL0, DCZID_EL0),
arm64_sys_reg!(0b11, 0b011, 0b0010, 0b0100, 0b000, RO, RNDR, RNDR),
arm64_sys_reg!(0b11, 0b011, 0b0010, 0b0100, 0b001, RO, RNDRRS, RNDRRS),
// 11 011 0100 0010 000 - NZCV -
// 11 011 0100 0010 001 - DAIF -
// 11 011 0100 0010 010 - SVCR -
// 11 011 0100 0010 101 - DIT -
// 11 011 0100 0010 110 - SSBS -
// 11 011 0100 0010 111 - TCO -
arm64_sys_reg!(0b11, 0b011, 0b0100, 0b0100, 0b000, RW, FPCR, FPCR),
arm64_sys_reg!(0b11, 0b011, 0b0100, 0b0100, 0b001, RW, FPSR, FPSR),
arm64_sys_reg!(0b11, 0b011, 0b0100, 0b0101, 0b000, RW, DSPSR_EL0, DSPSR_EL0),
arm64_sys_reg!(0b11, 0b011, 0b0100, 0b0101, 0b001, RW, DLR_EL0, DLR_EL0),
arm64_sys_reg!(0b11, 0b011, 0b1001, 0b1100, 0b000, RW, PMCR_EL0, PMCR_EL0),
arm64_sys_reg!(0b11, 0b011, 0b1001, 0b1100, 0b001, RW, PMCNTENSET_EL0, PMCNTENSET_EL0),
arm64_sys_reg!(0b11, 0b011, 0b1001, 0b1100, 0b010, RW, PMCNTENCLR_EL0, PMCNTENCLR_EL0),
arm64_sys_reg!(0b11, 0b011, 0b1001, 0b1100, 0b011, RW, PMOVSCLR_EL0, PMOVSCLR_EL0),
arm64_sys_reg!(0b11, 0b011, 0b1001, 0b1100, 0b100, WO, PMSWINC_EL0, PMSWINC_EL0),
arm64_sys_reg!(0b11, 0b011, 0b1001, 0b1100, 0b101, RW, PMSELR_EL0, PMSELR_EL0),
arm64_sys_reg!(0b11, 0b011, 0b1001, 0b1100, 0b110, RO, PMCEID0_EL0, PMCEID0_EL0),
arm64_sys_reg!(0b11, 0b011, 0b1001, 0b1100, 0b111, RO, PMCEID1_EL0, PMCEID1_EL0),
arm64_sys_reg!(0b11, 0b011, 0b1001, 0b1101, 0b000, RW, PMCCNTR_EL0, PMCCNTR_EL0),
arm64_sys_reg!(0b11, 0b011, 0b1001, 0b1101, 0b001, RW, PMXEVTYPER_EL0, PMCCFILTR_EL0),
arm64_sys_reg!(0b11, 0b011, 0b1001, 0b1101, 0b001, RW, PMXEVTYPER_EL0, PMEVTYPER_EL0),
arm64_sys_reg!(0b11, 0b011, 0b1001, 0b1101, 0b010, RW, PMXEVCNTR_EL0, PMEVCNTR_EL0),
arm64_sys_reg!(0b11, 0b011, 0b1001, 0b1110, 0b000, RW, PMUSERENR_EL0, PMUSERENR_EL0),
arm64_sys_reg!(0b11, 0b011, 0b1001, 0b1110, 0b011, RW, PMOVSSET_EL0, PMOVSSET_EL0),
arm64_sys_reg!(0b11, 0b011, 0b1101, 0b0000, 0b010, RW, TPIDR_EL0, TPIDR_EL0),
arm64_sys_reg!(0b11, 0b011, 0b1101, 0b0000, 0b011, RW, TPIDRRO_EL0, TPIDRRO_EL0),
arm64_sys_reg!(0b11, 0b011, 0b1101, 0b0000, 0b101, RW, TPIDR2_EL0, TPIDR2_EL0),
arm64_sys_reg!(0b11, 0b011, 0b1101, 0b0000, 0b111, RW, SCXTNUM_EL0, SCXTNUM_EL0),
arm64_sys_reg!(0b11, 0b011, 0b1101, 0b0010, 0b000, RW, AMCR_EL0, AMCR_EL0),
arm64_sys_reg!(0b11, 0b011, 0b1101, 0b0010, 0b001, RO, AMCFGR_EL0, AMCFGR_EL0),
arm64_sys_reg!(0b11, 0b011, 0b1101, 0b0010, 0b010, RO, AMCGCR_EL0, AMCGCR_EL0),
arm64_sys_reg!(0b11, 0b011, 0b1101, 0b0010, 0b011, RW, AMUSERENR_EL0, AMUSERENR_EL0),
arm64_sys_reg!(0b11, 0b011, 0b1101, 0b0010, 0b100, RW, AMCNTENCLR0_EL0, AMCNTENCLR0_EL0),
arm64_sys_reg!(0b11, 0b011, 0b1101, 0b0010, 0b101, RW, AMCNTENSET0_EL0, AMCNTENSET0_EL0),
arm64_sys_reg!(0b11, 0b011, 0b1101, 0b0010, 0b110, RO, AMCG1IDR_EL0, AMCG1IDR_EL0),
arm64_sys_reg!(0b11, 0b011, 0b1101, 0b0011, 0b000, RW, AMCNTENCLR1_EL0, AMCNTENCLR1_EL0),
arm64_sys_reg!(0b11, 0b011, 0b1101, 0b0011, 0b001, RW, AMCNTENSET1_EL0, AMCNTENSET1_EL0),
// 11 011 1101 010:m[3] m[2:0] RW AMEVCNTR0<n>_EL0 AMEVCNTR0_EL0[]
// 11 011 1101 011:m[3] m[2:0] RO AMEVTYPER0<n>_EL0 AMEVTYPER0_EL0[]
// 11 011 1101 110:m[3] m[2:0] RW AMEVCNTR1<n>_EL0 AMEVCNTR1_EL0[]
// 11 011 1101 111:m[3] m[2:0] RW AMEVTYPER1<n>_EL0 AMEVTYPER1_EL0[]
arm64_sys_reg!(0b11, 0b011, 0b1110, 0b0000, 0b000, RW, CNTFRQ_EL0, CNTFRQ_EL0),
// 11 011 1110 0000 001 - CNTPCT_EL0 -
// 11 011 1110 0000 010 - CNTVCT_EL0 -
// 11 011 1110 0000 101 - CNTPCTSS_EL0 -
// 11 011 1110 0000 110 - CNTVCTSS_EL0 -
// 11 011 1110 0010 000 - CNTHP_TVAL_EL2 -
// 11 011 1110 0010 000 - CNTHPS_TVAL_EL2 -
// 11 011 1110 0010 000 - CNTP_TVAL_EL0 -
arm64_sys_reg!(0b11, 0b011, 0b1110, 0b0010, 0b001, RW, CNTHP_CTL_EL2, CNTHPS_CTL_EL2),
arm64_sys_reg!(0b11, 0b011, 0b1110, 0b0010, 0b001, RW, CNTHP_CTL_EL2, CNTHP_CTL_EL2),
arm64_sys_reg!(0b11, 0b011, 0b1110, 0b0010, 0b001, RW, CNTHP_CTL_EL2, CNTP_CTL_EL0),
arm64_sys_reg!(0b11, 0b011, 0b1110, 0b0010, 0b001, RW, CNTHPS_CTL_EL2, CNTHPS_CTL_EL2),
arm64_sys_reg!(0b11, 0b011, 0b1110, 0b0010, 0b001, RW, CNTHPS_CTL_EL2, CNTHP_CTL_EL2),
arm64_sys_reg!(0b11, 0b011, 0b1110, 0b0010, 0b001, RW, CNTHPS_CTL_EL2, CNTP_CTL_EL0),
arm64_sys_reg!(0b11, 0b011, 0b1110, 0b0010, 0b001, RW, CNTP_CTL_EL0, CNTHPS_CTL_EL2),
arm64_sys_reg!(0b11, 0b011, 0b1110, 0b0010, 0b001, RW, CNTP_CTL_EL0, CNTHP_CTL_EL2),
arm64_sys_reg!(0b11, 0b011, 0b1110, 0b0010, 0b001, RW, CNTP_CTL_EL0, CNTP_CTL_EL0),
arm64_sys_reg!(0b11, 0b011, 0b1110, 0b0010, 0b010, RW, CNTHP_CVAL_EL2, CNTHPS_CVAL_EL2),
arm64_sys_reg!(0b11, 0b011, 0b1110, 0b0010, 0b010, RW, CNTHP_CVAL_EL2, CNTHP_CVAL_EL2),
arm64_sys_reg!(0b11, 0b011, 0b1110, 0b0010, 0b010, RW, CNTHP_CVAL_EL2, CNTP_CVAL_EL0),
arm64_sys_reg!(0b11, 0b011, 0b1110, 0b0010, 0b010, RW, CNTHPS_CVAL_EL2, CNTHPS_CVAL_EL2),
arm64_sys_reg!(0b11, 0b011, 0b1110, 0b0010, 0b010, RW, CNTHPS_CVAL_EL2, CNTHP_CVAL_EL2),
arm64_sys_reg!(0b11, 0b011, 0b1110, 0b0010, 0b010, RW, CNTHPS_CVAL_EL2, CNTP_CVAL_EL0),
arm64_sys_reg!(0b11, 0b011, 0b1110, 0b0010, 0b010, RW, CNTP_CVAL_EL0, CNTHPS_CVAL_EL2),
arm64_sys_reg!(0b11, 0b011, 0b1110, 0b0010, 0b010, RW, CNTP_CVAL_EL0, CNTHP_CVAL_EL2),
arm64_sys_reg!(0b11, 0b011, 0b1110, 0b0010, 0b010, RW, CNTP_CVAL_EL0, CNTP_CVAL_EL0),
// 11 011 1110 0011 000 - CNTHV_TVAL_EL2 -
// 11 011 1110 0011 000 - CNTHVS_TVAL_EL2 -
// 11 011 1110 0011 000 - CNTV_TVAL_EL0 -
arm64_sys_reg!(0b11, 0b011, 0b1110, 0b0011, 0b001, RW, CNTHV_CTL_EL2, CNTHVS_CTL_EL2),
arm64_sys_reg!(0b11, 0b011, 0b1110, 0b0011, 0b001, RW, CNTHV_CTL_EL2, CNTHV_CTL_EL2),
arm64_sys_reg!(0b11, 0b011, 0b1110, 0b0011, 0b001, RW, CNTHV_CTL_EL2, CNTV_CTL_EL0),
arm64_sys_reg!(0b11, 0b011, 0b1110, 0b0011, 0b001, RW, CNTHVS_CTL_EL2, CNTHVS_CTL_EL2),
arm64_sys_reg!(0b11, 0b011, 0b1110, 0b0011, 0b001, RW, CNTHVS_CTL_EL2, CNTHV_CTL_EL2),
arm64_sys_reg!(0b11, 0b011, 0b1110, 0b0011, 0b001, RW, CNTHVS_CTL_EL2, CNTV_CTL_EL0),
arm64_sys_reg!(0b11, 0b011, 0b1110, 0b0011, 0b001, RW, CNTV_CTL_EL0, CNTHVS_CTL_EL2),
arm64_sys_reg!(0b11, 0b011, 0b1110, 0b0011, 0b001, RW, CNTV_CTL_EL0, CNTHV_CTL_EL2),
arm64_sys_reg!(0b11, 0b011, 0b1110, 0b0011, 0b001, RW, CNTV_CTL_EL0, CNTV_CTL_EL0),
arm64_sys_reg!(0b11, 0b011, 0b1110, 0b0011, 0b010, RW, CNTHV_CVAL_EL2, CNTHVS_CVAL_EL2),
arm64_sys_reg!(0b11, 0b011, 0b1110, 0b0011, 0b010, RW, CNTHV_CVAL_EL2, CNTHV_CVAL_EL2),
arm64_sys_reg!(0b11, 0b011, 0b1110, 0b0011, 0b010, RW, CNTHV_CVAL_EL2, CNTV_CVAL_EL0),
arm64_sys_reg!(0b11, 0b011, 0b1110, 0b0011, 0b010, RW, CNTHVS_CVAL_EL2, CNTHVS_CVAL_EL2),
arm64_sys_reg!(0b11, 0b011, 0b1110, 0b0011, 0b010, RW, CNTHVS_CVAL_EL2, CNTHV_CVAL_EL2),
arm64_sys_reg!(0b11, 0b011, 0b1110, 0b0011, 0b010, RW, CNTHVS_CVAL_EL2, CNTV_CVAL_EL0),
arm64_sys_reg!(0b11, 0b011, 0b1110, 0b0011, 0b010, RW, CNTV_CVAL_EL0, CNTHVS_CVAL_EL2),
arm64_sys_reg!(0b11, 0b011, 0b1110, 0b0011, 0b010, RW, CNTV_CVAL_EL0, CNTHV_CVAL_EL2),
arm64_sys_reg!(0b11, 0b011, 0b1110, 0b0011, 0b010, RW, CNTV_CVAL_EL0, CNTV_CVAL_EL0),
// 11 011 1110 10:m[4:3] m[2:0] RW PMEVCNTR<n>_EL0 PMEVCNTR_EL0[]
arm64_sys_reg!(0b11, 0b011, 0b1110, 0b1111, 0b111, RW, PMCCFILTR_EL0, PMCCFILTR_EL0),
// 11 011 1110 11:m[4:3] m[2:0] RW PMEVTYPER<n>_EL0 PMEVTYPER_EL0[]
arm64_sys_reg!(0b11, 0b100, 0b0000, 0b0000, 0b000, RO, VPIDR_EL2, MIDR_EL1),
arm64_sys_reg!(0b11, 0b100, 0b0000, 0b0000, 0b000, RW, VPIDR_EL2, VPIDR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b0000, 0b0000, 0b101, RO, VMPIDR_EL2, MPIDR_EL1),
arm64_sys_reg!(0b11, 0b100, 0b0000, 0b0000, 0b101, RW, VMPIDR_EL2, VMPIDR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b0001, 0b0000, 0b000, RW, SCTLR_EL2, SCTLR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b0001, 0b0000, 0b001, RW, ACTLR_EL2, ACTLR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b0001, 0b0001, 0b000, RW, HCR_EL2, HCR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b0001, 0b0001, 0b001, RW, MDCR_EL2, MDCR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b0001, 0b0001, 0b010, RW, CPTR_EL2, CPTR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b0001, 0b0001, 0b011, RW, HSTR_EL2, HSTR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b0001, 0b0001, 0b100, RW, HFGRTR_EL2, HFGRTR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b0001, 0b0001, 0b101, RW, HFGWTR_EL2, HFGWTR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b0001, 0b0001, 0b110, RW, HFGITR_EL2, HFGITR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b0001, 0b0001, 0b111, RW, HACR_EL2, HACR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b0001, 0b0010, 0b000, RW, ZCR_EL2, ZCR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b0001, 0b0010, 0b001, RW, TRFCR_EL2, TRFCR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b0001, 0b0010, 0b010, RW, HCRX_EL2, HCRX_EL2),
arm64_sys_reg!(0b11, 0b100, 0b0001, 0b0010, 0b101, RW, SMPRIMAP_EL2, SMPRIMAP_EL2),
arm64_sys_reg!(0b11, 0b100, 0b0001, 0b0010, 0b110, RW, SMCR_EL2, SMCR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b0001, 0b0011, 0b001, RW, SDER32_EL2, SDER32_EL2),
arm64_sys_reg!(0b11, 0b100, 0b0010, 0b0000, 0b000, RW, TTBR0_EL2, TTBR0_EL2),
arm64_sys_reg!(0b11, 0b100, 0b0010, 0b0000, 0b001, RW, TTBR1_EL2, TTBR1_EL2),
arm64_sys_reg!(0b11, 0b100, 0b0010, 0b0000, 0b010, RW, TCR_EL2, TCR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b0010, 0b0001, 0b000, RW, VTTBR_EL2, VTTBR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b0010, 0b0001, 0b010, RW, VTCR_EL2, VTCR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b0010, 0b0010, 0b000, RW, VNCR_EL2, VNCR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b0010, 0b0110, 0b000, RW, VSTTBR_EL2, VSTTBR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b0010, 0b0110, 0b010, RW, VSTCR_EL2, VSTCR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b0011, 0b0000, 0b000, RW, DACR32_EL2, DACR32_EL2),
arm64_sys_reg!(0b11, 0b100, 0b0011, 0b0001, 0b100, RW, HDFGRTR_EL2, HDFGRTR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b0011, 0b0001, 0b101, RW, HDFGWTR_EL2, HDFGWTR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b0011, 0b0001, 0b110, RW, HAFGRTR_EL2, HAFGRTR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b0100, 0b0000, 0b000, RW, SPSR_EL1, SPSR_EL1),
arm64_sys_reg!(0b11, 0b100, 0b0100, 0b0000, 0b000, RW, SPSR_EL1, SPSR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b0100, 0b0000, 0b000, RW, SPSR_EL2, SPSR_EL1),
arm64_sys_reg!(0b11, 0b100, 0b0100, 0b0000, 0b000, RW, SPSR_EL2, SPSR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b0100, 0b0000, 0b001, RW, ELR_EL1, ELR_EL1),
arm64_sys_reg!(0b11, 0b100, 0b0100, 0b0000, 0b001, RW, ELR_EL1, ELR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b0100, 0b0000, 0b001, RW, ELR_EL2, ELR_EL1),
arm64_sys_reg!(0b11, 0b100, 0b0100, 0b0000, 0b001, RW, ELR_EL2, ELR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b0100, 0b0001, 0b000, RW, SP_EL1, SP_EL1),
arm64_sys_reg!(0b11, 0b100, 0b0100, 0b0011, 0b000, RW, SPSR_irq, SPSR_irq),
arm64_sys_reg!(0b11, 0b100, 0b0100, 0b0011, 0b001, RW, SPSR_abt, SPSR_abt),
arm64_sys_reg!(0b11, 0b100, 0b0100, 0b0011, 0b010, RW, SPSR_und, SPSR_und),
arm64_sys_reg!(0b11, 0b100, 0b0100, 0b0011, 0b011, RW, SPSR_fiq, SPSR_fiq),
arm64_sys_reg!(0b11, 0b100, 0b0101, 0b0000, 0b001, RW, IFSR32_EL2, IFSR32_EL2),
arm64_sys_reg!(0b11, 0b100, 0b0101, 0b0001, 0b000, RW, AFSR0_EL2, AFSR0_EL2),
arm64_sys_reg!(0b11, 0b100, 0b0101, 0b0001, 0b001, RW, AFSR1_EL2, AFSR1_EL2),
arm64_sys_reg!(0b11, 0b100, 0b0101, 0b0010, 0b000, RW, ESR_EL1, ESR_EL1),
arm64_sys_reg!(0b11, 0b100, 0b0101, 0b0010, 0b000, RW, ESR_EL1, ESR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b0101, 0b0010, 0b000, RW, ESR_EL2, ESR_EL1),
arm64_sys_reg!(0b11, 0b100, 0b0101, 0b0010, 0b000, RW, ESR_EL2, ESR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b0101, 0b0010, 0b011, RW, VSESR_EL2, VSESR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b0101, 0b0011, 0b000, RW, FPEXC32_EL2, FPEXC32_EL2),
arm64_sys_reg!(0b11, 0b100, 0b0101, 0b0110, 0b000, RW, TFSR_EL1, TFSR_EL1),
arm64_sys_reg!(0b11, 0b100, 0b0101, 0b0110, 0b000, RW, TFSR_EL1, TFSR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b0101, 0b0110, 0b000, RW, TFSR_EL2, TFSR_EL1),
arm64_sys_reg!(0b11, 0b100, 0b0101, 0b0110, 0b000, RW, TFSR_EL2, TFSR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b0110, 0b0000, 0b000, RW, FAR_EL1, FAR_EL1),
arm64_sys_reg!(0b11, 0b100, 0b0110, 0b0000, 0b000, RW, FAR_EL1, FAR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b0110, 0b0000, 0b000, RW, FAR_EL2, FAR_EL1),
arm64_sys_reg!(0b11, 0b100, 0b0110, 0b0000, 0b000, RW, FAR_EL2, FAR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b0110, 0b0000, 0b100, RW, HPFAR_EL2, HPFAR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b1001, 0b1001, 0b000, RW, PMSCR_EL2, PMSCR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b1010, 0b0010, 0b000, RW, MAIR_EL2, MAIR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b1010, 0b0011, 0b000, RW, AMAIR_EL2, AMAIR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b1010, 0b0100, 0b000, RW, MPAMHCR_EL2, MPAMHCR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b1010, 0b0100, 0b001, RW, MPAMVPMV_EL2, MPAMVPMV_EL2),
arm64_sys_reg!(0b11, 0b100, 0b1010, 0b0101, 0b000, RW, MPAM2_EL2, MPAM2_EL2),
arm64_sys_reg!(0b11, 0b100, 0b1010, 0b0110, 0b000, RW, MPAMVPM0_EL2, MPAMVPM0_EL2),
arm64_sys_reg!(0b11, 0b100, 0b1010, 0b0110, 0b001, RW, MPAMVPM1_EL2, MPAMVPM1_EL2),
arm64_sys_reg!(0b11, 0b100, 0b1010, 0b0110, 0b010, RW, MPAMVPM2_EL2, MPAMVPM2_EL2),
arm64_sys_reg!(0b11, 0b100, 0b1010, 0b0110, 0b011, RW, MPAMVPM3_EL2, MPAMVPM3_EL2),
arm64_sys_reg!(0b11, 0b100, 0b1010, 0b0110, 0b100, RW, MPAMVPM4_EL2, MPAMVPM4_EL2),
arm64_sys_reg!(0b11, 0b100, 0b1010, 0b0110, 0b101, RW, MPAMVPM5_EL2, MPAMVPM5_EL2),
arm64_sys_reg!(0b11, 0b100, 0b1010, 0b0110, 0b110, RW, MPAMVPM6_EL2, MPAMVPM6_EL2),
arm64_sys_reg!(0b11, 0b100, 0b1010, 0b0110, 0b111, RW, MPAMVPM7_EL2, MPAMVPM7_EL2),
arm64_sys_reg!(0b11, 0b100, 0b1100, 0b0000, 0b000, RW, VBAR_EL2, VBAR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b1100, 0b0000, 0b001, RO, RVBAR_EL2, RVBAR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b1100, 0b0000, 0b010, RW, RMR_EL2, RMR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b1100, 0b0001, 0b001, RW, VDISR_EL2, VDISR_EL2),
// 11 100 1100 1000 0:m[1:0] RW ICH_AP0R<m>_EL2 ICH_AP0R_EL2[]
// 11 100 1100 1001 0:m[1:0] RW ICH_AP1R<m>_EL2 ICH_AP1R_EL2[]
arm64_sys_reg!(0b11, 0b100, 0b1100, 0b1001, 0b101, RW, ICC_SRE_EL2, ICC_SRE_EL2),
arm64_sys_reg!(0b11, 0b100, 0b1100, 0b1011, 0b000, RW, ICH_HCR_EL2, ICH_HCR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b1100, 0b1011, 0b001, RO, ICH_VTR_EL2, ICH_VTR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b1100, 0b1011, 0b010, RO, ICH_MISR_EL2, ICH_MISR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b1100, 0b1011, 0b011, RO, ICH_EISR_EL2, ICH_EISR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b1100, 0b1011, 0b101, RO, ICH_ELRSR_EL2, ICH_ELRSR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b1100, 0b1011, 0b111, RW, ICH_VMCR_EL2, ICH_VMCR_EL2),
// 11 100 1100 110:m[3] m[2:0] RW ICH_LR<m>_EL2 ICH_LR_EL2[]
arm64_sys_reg!(0b11, 0b100, 0b1101, 0b0000, 0b001, RW, CONTEXTIDR_EL2, CONTEXTIDR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b1101, 0b0000, 0b010, RW, TPIDR_EL2, TPIDR_EL2),
arm64_sys_reg!(0b11, 0b100, 0b1101, 0b0000, 0b111, RW, SCXTNUM_EL2, SCXTNUM_EL2),
// 11 100 1101 100:m[3] m[2:0] RW AMEVCNTVOFF0<n>_EL2 AMEVCNTVOFF0_EL2[]
// 11 100 1101 101:m[3] m[2:0] RW AMEVCNTVOFF1<n>_EL2 AMEVCNTVOFF1_EL2[]
arm64_sys_reg!(0b11, 0b100, 0b1110, 0b0000, 0b011, RW, CNTVOFF_EL2, CNTVOFF_EL2),
arm64_sys_reg!(0b11, 0b100, 0b1110, 0b0000, 0b110, RW, CNTPOFF_EL2, CNTPOFF_EL2),
arm64_sys_reg!(0b11, 0b100, 0b1110, 0b0001, 0b000, RW, CNTHCTL_EL2, CNTHCTL_EL2),
// 11 100 1110 0010 000 - CNTHP_TVAL_EL2 -
arm64_sys_reg!(0b11, 0b100, 0b1110, 0b0010, 0b001, RW, CNTHP_CTL_EL2, CNTHP_CTL_EL2),
arm64_sys_reg!(0b11, 0b100, 0b1110, 0b0010, 0b010, RW, CNTHP_CVAL_EL2, CNTHP_CVAL_EL2),
// 11 100 1110 0011 000 - CNTHV_TVAL_EL2 -
arm64_sys_reg!(0b11, 0b100, 0b1110, 0b0011, 0b001, RW, CNTHV_CTL_EL2, CNTHV_CTL_EL2),
arm64_sys_reg!(0b11, 0b100, 0b1110, 0b0011, 0b010, RW, CNTHV_CVAL_EL2, CNTHV_CVAL_EL2),
// 11 100 1110 0100 000 - CNTHVS_TVAL_EL2 -
arm64_sys_reg!(0b11, 0b100, 0b1110, 0b0100, 0b001, RW, CNTHVS_CTL_EL2, CNTHVS_CTL_EL2),
arm64_sys_reg!(0b11, 0b100, 0b1110, 0b0100, 0b010, RW, CNTHVS_CVAL_EL2, CNTHVS_CVAL_EL2),
// 11 100 1110 0101 000 - CNTHPS_TVAL_EL2 -
arm64_sys_reg!(0b11, 0b100, 0b1110, 0b0101, 0b001, RW, CNTHPS_CTL_EL2, CNTHPS_CTL_EL2),
arm64_sys_reg!(0b11, 0b100, 0b1110, 0b0101, 0b010, RW, CNTHPS_CVAL_EL2, CNTHPS_CVAL_EL2),
arm64_sys_reg!(0b11, 0b101, 0b0001, 0b0000, 0b000, RW, SCTLR_EL1, SCTLR_EL1),
arm64_sys_reg!(0b11, 0b101, 0b0001, 0b0000, 0b010, RW, CPACR_EL1, CPACR_EL1),
arm64_sys_reg!(0b11, 0b101, 0b0001, 0b0010, 0b000, RW, ZCR_EL1, ZCR_EL1),
arm64_sys_reg!(0b11, 0b101, 0b0001, 0b0010, 0b001, RW, TRFCR_EL1, TRFCR_EL1),
arm64_sys_reg!(0b11, 0b101, 0b0001, 0b0010, 0b110, RW, SMCR_EL1, SMCR_EL1),
arm64_sys_reg!(0b11, 0b101, 0b0010, 0b0000, 0b000, RW, TTBR0_EL1, TTBR0_EL1),
arm64_sys_reg!(0b11, 0b101, 0b0010, 0b0000, 0b001, RW, TTBR1_EL1, TTBR1_EL1),
arm64_sys_reg!(0b11, 0b101, 0b0010, 0b0000, 0b010, RW, TCR_EL1, TCR_EL1),
arm64_sys_reg!(0b11, 0b101, 0b0100, 0b0000, 0b000, RW, SPSR_EL1, SPSR_EL1),
arm64_sys_reg!(0b11, 0b101, 0b0100, 0b0000, 0b001, RW, ELR_EL1, ELR_EL1),
arm64_sys_reg!(0b11, 0b101, 0b0101, 0b0001, 0b000, RW, AFSR0_EL1, AFSR0_EL1),
arm64_sys_reg!(0b11, 0b101, 0b0101, 0b0001, 0b001, RW, AFSR1_EL1, AFSR1_EL1),
arm64_sys_reg!(0b11, 0b101, 0b0101, 0b0010, 0b000, RW, ESR_EL1, ESR_EL1),
arm64_sys_reg!(0b11, 0b101, 0b0101, 0b0110, 0b000, RW, TFSR_EL1, TFSR_EL1),
arm64_sys_reg!(0b11, 0b101, 0b0110, 0b0000, 0b000, RW, FAR_EL1, FAR_EL1),
arm64_sys_reg!(0b11, 0b101, 0b1001, 0b1001, 0b000, RW, PMSCR_EL1, PMSCR_EL1),
arm64_sys_reg!(0b11, 0b101, 0b1010, 0b0010, 0b000, RW, MAIR_EL1, MAIR_EL1),
arm64_sys_reg!(0b11, 0b101, 0b1010, 0b0011, 0b000, RW, AMAIR_EL1, AMAIR_EL1),
arm64_sys_reg!(0b11, 0b101, 0b1010, 0b0101, 0b000, RW, MPAM1_EL1, MPAM1_EL1),
arm64_sys_reg!(0b11, 0b101, 0b1100, 0b0000, 0b000, RW, VBAR_EL1, VBAR_EL1),
arm64_sys_reg!(0b11, 0b101, 0b1101, 0b0000, 0b001, RW, CONTEXTIDR_EL1, CONTEXTIDR_EL1),
arm64_sys_reg!(0b11, 0b101, 0b1101, 0b0000, 0b111, RW, SCXTNUM_EL1, SCXTNUM_EL1),
arm64_sys_reg!(0b11, 0b101, 0b1110, 0b0001, 0b000, RW, CNTKCTL_EL1, CNTKCTL_EL1),
// 11 101 1110 0010 000 - CNTP_TVAL_EL0 -
arm64_sys_reg!(0b11, 0b101, 0b1110, 0b0010, 0b001, RW, CNTP_CTL_EL0, CNTP_CTL_EL0),
arm64_sys_reg!(0b11, 0b101, 0b1110, 0b0010, 0b010, RW, CNTP_CVAL_EL0, CNTP_CVAL_EL0),
// 11 101 1110 0011 000 - CNTV_TVAL_EL0 -
arm64_sys_reg!(0b11, 0b101, 0b1110, 0b0011, 0b001, RW, CNTV_CTL_EL0, CNTV_CTL_EL0),
arm64_sys_reg!(0b11, 0b101, 0b1110, 0b0011, 0b010, RW, CNTV_CVAL_EL0, CNTV_CVAL_EL0),
arm64_sys_reg!(0b11, 0b110, 0b0001, 0b0000, 0b000, RW, SCTLR_EL3, SCTLR_EL3),
arm64_sys_reg!(0b11, 0b110, 0b0001, 0b0000, 0b001, RW, ACTLR_EL3, ACTLR_EL3),
arm64_sys_reg!(0b11, 0b110, 0b0001, 0b0001, 0b000, RW, SCR_EL3, SCR_EL3),
arm64_sys_reg!(0b11, 0b110, 0b0001, 0b0001, 0b001, RW, SDER32_EL3, SDER32_EL3),
arm64_sys_reg!(0b11, 0b110, 0b0001, 0b0001, 0b010, RW, CPTR_EL3, CPTR_EL3),
arm64_sys_reg!(0b11, 0b110, 0b0001, 0b0010, 0b000, RW, ZCR_EL3, ZCR_EL3),
arm64_sys_reg!(0b11, 0b110, 0b0001, 0b0010, 0b110, RW, SMCR_EL3, SMCR_EL3),
arm64_sys_reg!(0b11, 0b110, 0b0001, 0b0011, 0b001, RW, MDCR_EL3, MDCR_EL3),
arm64_sys_reg!(0b11, 0b110, 0b0010, 0b0000, 0b000, RW, TTBR0_EL3, TTBR0_EL3),
arm64_sys_reg!(0b11, 0b110, 0b0010, 0b0000, 0b010, RW, TCR_EL3, TCR_EL3),
arm64_sys_reg!(0b11, 0b110, 0b0010, 0b0001, 0b100, RW, GPTBR_EL3, GPTBR_EL3),
arm64_sys_reg!(0b11, 0b110, 0b0010, 0b0001, 0b110, RW, GPCCR_EL3, GPCCR_EL3),
arm64_sys_reg!(0b11, 0b110, 0b0100, 0b0000, 0b000, RW, SPSR_EL3, SPSR_EL3),
arm64_sys_reg!(0b11, 0b110, 0b0100, 0b0000, 0b001, RW, ELR_EL3, ELR_EL3),
arm64_sys_reg!(0b11, 0b110, 0b0100, 0b0001, 0b000, RW, SP_EL2, SP_EL2),
arm64_sys_reg!(0b11, 0b110, 0b0101, 0b0001, 0b000, RW, AFSR0_EL3, AFSR0_EL3),
arm64_sys_reg!(0b11, 0b110, 0b0101, 0b0001, 0b001, RW, AFSR1_EL3, AFSR1_EL3),
arm64_sys_reg!(0b11, 0b110, 0b0101, 0b0010, 0b000, RW, ESR_EL3, ESR_EL3),
arm64_sys_reg!(0b11, 0b110, 0b0101, 0b0110, 0b000, RW, TFSR_EL3, TFSR_EL3),
arm64_sys_reg!(0b11, 0b110, 0b0110, 0b0000, 0b000, RW, FAR_EL3, FAR_EL3),
arm64_sys_reg!(0b11, 0b110, 0b0110, 0b0000, 0b101, RW, MFAR_EL3, MFAR_EL3),
arm64_sys_reg!(0b11, 0b110, 0b1010, 0b0010, 0b000, RW, MAIR_EL3, MAIR_EL3),
arm64_sys_reg!(0b11, 0b110, 0b1010, 0b0011, 0b000, RW, AMAIR_EL3, AMAIR_EL3),
arm64_sys_reg!(0b11, 0b110, 0b1010, 0b0101, 0b000, RW, MPAM3_EL3, MPAM3_EL3),
arm64_sys_reg!(0b11, 0b110, 0b1100, 0b0000, 0b000, RW, VBAR_EL3, VBAR_EL3),
arm64_sys_reg!(0b11, 0b110, 0b1100, 0b0000, 0b001, RO, RVBAR_EL3, RVBAR_EL3),
arm64_sys_reg!(0b11, 0b110, 0b1100, 0b0000, 0b010, RW, RMR_EL3, RMR_EL3),
arm64_sys_reg!(0b11, 0b110, 0b1100, 0b1100, 0b100, RW, ICC_CTLR_EL3, ICC_CTLR_EL3),
arm64_sys_reg!(0b11, 0b110, 0b1100, 0b1100, 0b101, RW, ICC_SRE_EL3, ICC_SRE_EL3),
arm64_sys_reg!(0b11, 0b110, 0b1100, 0b1100, 0b111, RW, ICC_IGRPEN1_EL3, ICC_IGRPEN1_EL3),
arm64_sys_reg!(0b11, 0b110, 0b1101, 0b0000, 0b010, RW, TPIDR_EL3, TPIDR_EL3),
arm64_sys_reg!(0b11, 0b110, 0b1101, 0b0000, 0b111, RW, SCXTNUM_EL3, SCXTNUM_EL3),
// 11 111 1110 0010 000 - CNTPS_TVAL_EL1 -
arm64_sys_reg!(0b11, 0b111, 0b1110, 0b0010, 0b001, RW, CNTPS_CTL_EL1, CNTPS_CTL_EL1),
arm64_sys_reg!(0b11, 0b111, 0b1110, 0b0010, 0b010, RW, CNTPS_CVAL_EL1, CNTPS_CVAL_EL1),
];

fn print_usage_and_exit() -> ! {
    println!(
        "Usage: arm_regs <mode> <path>
where:
  mode: id/register
  path: path to file with ids/names"
    );
    std::process::exit(1);
}

#[derive(Debug)]
enum Error {
    Io(std::io::Error),
    Parse(std::num::ParseIntError),
}

impl std::error::Error for Error {}

impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{self:?}")
    }
}

fn find_by_id(path: PathBuf) -> Result<(), Error> {
    let content = std::fs::read_to_string(path).map_err(Error::Io)?;

    for line in content.lines() {
        let id = line.parse::<u64>().map_err(Error::Parse)?;
        let regs = ARM_REGISTERS
            .iter()
            .filter(|reg| reg.reg_id == id)
            .collect::<Vec<_>>();
        if !regs.is_empty() {
            for reg in regs {
                println!("id: {id} => {reg:?}");
            }
        } else {
            println!("id: {id} => None");
        }
    }
    Ok(())
}

fn find_by_register(path: PathBuf) -> Result<(), Error> {
    let content = std::fs::read_to_string(path).map_err(Error::Io)?;

    for line in content.lines() {
        let regs = ARM_REGISTERS
            .iter()
            .filter(|reg| reg.register == line)
            .collect::<Vec<_>>();
        if !regs.is_empty() {
            for reg in regs {
                println!("register: {line} => {reg:?}");
            }
        } else {
            println!("register: {line} => None");
        }
    }
    Ok(())
}

fn main() -> Result<(), Error> {
    let args = args();
    if args.len() != 3 {
        print_usage_and_exit();
    }

    let args = args.into_iter().collect::<Vec<String>>();

    match args[1].as_str() {
        "id" => find_by_id(args[2].clone().into())?,
        "register" => find_by_register(args[2].clone().into())?,
        _ => print_usage_and_exit(),
    }

    Ok(())
}
